version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: media-server-db
    environment:
      POSTGRES_DB: media_server
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - media-server-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: media-server-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - media-server-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: media-server-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: media_server
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-your_password_here}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      MEDIA_STORAGE_PATH: /app/media
    volumes:
      - ./media:/app/media:ro
      - ./temp:/app/temp
      - ./logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - media-server-network
    restart: unless-stopped

  # Frontend Web Client
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: media-server-frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - media-server-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: media-server-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - media-server-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  media-server-network:
    driver: bridge 